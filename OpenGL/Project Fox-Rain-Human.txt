#include <windows.h>
#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>
const int steps = 360;
const float angle = 3.1416*2/steps;
const double PI = 3.14156;
int frameNumber = 0;
float frameNumber1=0.1;
float frameNumber2 = 0.2;
float frameNumber3 = 0.3;
void doFrame(int v) {
    frameNumber++;
    glutPostRedisplay();
    glutTimerFunc(50,doFrame,0);
}

void doFrame1(int v) {
    frameNumber1+=0.03;
        if(frameNumber1>1.0){
      frameNumber1=0.3;
    }
    glutPostRedisplay();
    glutTimerFunc(10,doFrame1,0);
}
void doFrame2(int v) {
    frameNumber2+=0.01;
    if(frameNumber2>1.0){
      frameNumber2=0.2;
    }
    glutPostRedisplay();
    glutTimerFunc(10,doFrame2,0);
}
void doFrame3(int v) {
    frameNumber3+=0.02;
        if(frameNumber3>1.0){
      frameNumber3=0.0;
    }
    glutPostRedisplay();
    glutTimerFunc(10,doFrame3,0);
}

void blueSky(void){
      //glClear (GL_COLOR_BUFFER_BIT);

      //1.0f, 0.0f, 1.0f, 0.0f
      //glColor3f (1.0, 0.0, 1.0);
      glBegin(GL_QUADS); // Sky
      glColor3f(0.0, 0.2, 0.2);
      glVertex3f(0.0f, 0.60f, 0.0f);
      glColor3f(0.0, 0.2, 0.2);
      glVertex3f(1.5f, 0.60f, 0.0f);

      glColor3f (0.9, 0.9, 0.9);
      glVertex3f(1.5f, 1.0f, 0.0f);
      glColor3f(0.9, 0.9, 0.9);
      glVertex3f(0.0f, 1.0f, 0.0f);

      glEnd();
}
void ground(void){
      glBegin(GL_QUADS); // Earth
      glColor3f(0.0, 0.4, 0.0);
      glVertex3f(0.0f, 0.60f, 0.0f);
      glColor3f(0.0, 0.4, 0.0);
      glVertex3f(1.5f, 0.60f, 0.0f);
      glColor3f(0.0, 0.8, 0.0);
      glVertex3f(1.5f, 0.0f, 0.0f);
      glColor3f(0.0, 0.8, 0.0);
      glVertex3f(0.0f, 0.0f, 0.0f);
      glEnd();
}
void tree(float x, float y, float color){
    float b=0,c=0,d=0,e=0;
    for(int i =0; i<=4;i++){
      glBegin(GL_TRIANGLES);
      glColor3f(0.0f, 0.35f, 0.0f+color);
      glVertex3f(0.14f+x, 0.60f+b+y, 0.0f);
      glVertex3f(0.18f+c+x, 0.52f+d+y, 0.0f);
      glVertex3f(0.10f+e+x, 0.52f+d+y, 0.0f);
      glEnd();
        b-=0.02;
        c+=0.01;
        d-=0.04;
        e-=0.01;
      glBegin(GL_QUADS); // Root
      glColor3f(0.6, 0.3, 0.3);
      glVertex3f(0.13f+x, 0.29f+y, 0.0f);
      glVertex3f(0.13f+x, 0.36f+y, 0.0f);
      glVertex3f(0.15f+x, 0.36f+y, 0.0f);
      glVertex3f(0.15f+x, 0.29f+y, 0.0f);
      glEnd();
    }
}


void circleCloud(float x, float y, float rad)
{
    float radious = rad;


    glColor3f (.8,.8,.8);
    glBegin(GL_POLYGON);
    for(int i = 0; i<steps;i++){
       float theta = i*3.1416/180;
        glVertex2f(x+radious*sin(theta),y-radious*cos(theta));
    }
glEnd();

}

void Cloud(float x, float y,float rad){

    circleCloud(0.55+x,0.8+y,0.00+rad);
    circleCloud(0.5+x,0.8+y,0.012+rad);
    circleCloud(0.45+x,0.8+y,0.00+rad);

}
void rain(float x){
    float b=0,c=0;
    for(int i=0; i<=1000; i++){

        glBegin(GL_LINES);
        glColor3f(0.8f, 1.0f, 1.0f);
        glVertex3f(0.05f+c+x, 0.98f+b+x, 0.0f);
        glVertex3f(0.04f+c+x, 0.96f+b+x, 0.0f);

        glEnd();
         b-=0.05;
         c-=0.02;
    }

}

void allrain(void){
float rr = 0.0;
    for(int i =0;i<100;i++){

      rain(rr);
    rr+=0.25;
    }
}



void fox_head(float c)
{
    float radius = 0.024;

    glColor3f (0.8, 0.6, 0.3);
    //Circle making using Polygon
    glBegin(GL_POLYGON);
    for(int i = 0; i<steps;i++){
       float theta = i*3.1416/180;
        glVertex2f(0.5+c+radius*sin(theta),0.68-radius*cos(theta));//second way

    }
glEnd();

}
void fox_body(float x)
{
    glBegin(GL_TRIANGLES);
    glColor3f(0.8f, 0.6f, 0.3f);
    glVertex3f(0.499f+x, 0.695f, 0.0f);
    glVertex3f(0.53f+x, 0.56f, 0.0f);
    glVertex3f(0.47f+x, 0.56f, 0.0f);
    glEnd();
}

void fox_body_bottom(float c)
{
  float radius = 0.03;

    glColor3f (0.8, 0.6, 0.3);
    //Circle making using Polygon
    glBegin(GL_POLYGON);
    for(int i = 0; i<steps;i++){
       float theta = i*3.1416/180;
        glVertex2f(0.5+c+radius*sin(theta),0.552-radius*cos(theta));//second way

    }
glEnd();
}

void fox_tail(float x)
{
    glBegin(GL_POLYGON);
    glColor3f(0.9f, 0.6f, 0.2f);
    glVertex3f(0.499f+x, 0.59f, 0.0f);
    glVertex3f(0.499f+x, 0.575f, 0.0f);
    glVertex3f(0.415f+x, 0.625f, 0.0f);
    glVertex3f(0.435f+x, 0.645f, 0.0f);
    glEnd();
}
void fox_tail_ex(float x)
{
    glBegin(GL_POLYGON);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.455f+x, 0.628f, 0.0f);
    glVertex3f(0.45f+x, 0.603f, 0.0f);
    glVertex3f(0.415f+x, 0.625f, 0.0f);
    glVertex3f(0.435f+x, 0.645f, 0.0f);
    glEnd();
}



void fox_ear_left(float x)
{
    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.48f+x, 0.73f, 0.f);
    glVertex3f(0.495f+x, 0.70f, 0.f);
    glVertex3f(0.48f+x, 0.69f, 0.f);
    glEnd();
}

void fox_ear_right(float x)
{
    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.515f+x, 0.73f, 0.f);
    glVertex3f(0.517f+x, 0.69f, 0.f);
    glVertex3f(0.50f+x, 0.70f, 0.f);
    glEnd();
}

void person_hands1()
{
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);

    glVertex3f(0.90f, 0.28f, 0.0f);
    glVertex3f(0.90f, 0.27f, 0.0f);
    glVertex3f(0.86f, 0.24f, 0.0f);
    glVertex3f(0.86f, 0.25f, 0.0f);
    glEnd();
}

void person_body()
{
    glBegin(GL_POLYGON);
    glColor3f(0.4f, 0.0f, 0.8f);
    glVertex3f(0.889f, 0.30f, 0.0f);
    glVertex3f(0.911f, 0.30f, 0.0f);
    glVertex3f(0.95f, 0.09f, 0.0f);
    glVertex3f(0.85f, 0.09f, 0.0f);
    glEnd();
}


void person_head()
{
    float radius = 0.035;


    glColor3f (0.0, 0.0, 0.0);
//Circle making using Polygon
    glBegin(GL_POLYGON);
    for(int i = 0; i<steps;i++){
       float theta = i*3.1416/180;
        glVertex2f(0.9+radius*sin(theta),0.33-radius*cos(theta)); //second way
    }
glEnd();

}



void person_hands2()
{
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.90f, 0.26f, 0.0f);
    glVertex3f(0.90f, 0.25f, 0.0f);
    glVertex3f(0.86f, 0.22f, 0.0f);
    glVertex3f(0.86f, 0.23f, 0.0f);
    glEnd();
}


void person_hands3()
{
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.86f, 0.24f, 0.0f);
    glVertex3f(0.86f, 0.25f, 0.0f);
    glVertex3f(0.84f, 0.27f, 0.0f);
    glVertex3f(0.84f, 0.27f, 0.0f);
    glEnd();
}

void person_hands_4()
{
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.86f, 0.22f, 0.0f);
    glVertex3f(0.86f, 0.23f, 0.0f);
    glVertex3f(0.84f, 0.28f, 0.0f);
    glVertex3f(0.84f, 0.27f, 0.0f);
    glEnd();
}


void person_leg_left()
{
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);

    glVertex3f(0.88f, 0.09f, 0.0f);
    glVertex3f(0.888f, 0.09f, 0.0f);
    glVertex3f(0.860f, 0.0f, 0.0f); //Left Leg
    glVertex3f(0.852f, 0.0f, 0.0f);
    glEnd();
}

void person_leg_right()
{
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);

    glVertex3f(0.90f, 0.09f, 0.0f);
    glVertex3f(0.908f, 0.09f, 0.0f);
    glVertex3f(0.93f, 0.0f, 0.0f); //Right Leg
    glVertex3f(0.922f, 0.0f, 0.0f);
    glEnd();
}

void umbrella_stand()
{
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);

    glVertex3f(0.835f, 0.42f, 0.0f);
    glVertex3f(0.845f, 0.42f, 0.0f);
    glVertex3f(0.845f, 0.22f, 0.0f);
    glVertex3f(0.835f, 0.22f, 0.0f);
    glEnd();
}

void umbrella_stand_below()
{
    glBegin(GL_QUADS);
    glColor3f(0.9f, 0.0f, 0.6f);

    glVertex3f(0.835f, 0.23f, 0.0f);
    glVertex3f(0.845f, 0.23f, 0.0f);
    glVertex3f(0.852f, 0.18f, 0.0f);
    glVertex3f(0.828f, 0.18f, 0.0f);
    glEnd();
}

void umbrella_top(){
    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.827f, 0.56f, 0.0f);
    glVertex3f(0.853f, 0.56f, 0.0f);
    glVertex3f(0.84f, 0.61f, 0.0f);
    glEnd();
}

void umbrella(float rad, float color){

    float radious = rad;
    const int step = 180;

    glColor3f (color,0,color);
//Circle making using Polygon
    glBegin(GL_POLYGON);
    for(int i = 0; i<step;i++){
       float theta = i*3.1416/180;
        //glVertex2f(0.5+radious*cos(theta),0.5+radious*sin(theta));//one way
        glVertex2f(0.40+radious*sin(theta),0.85-radious*cos(theta)); //second way
    }
glEnd();

}

void umbrella_ball(float x, float rad,float c1,float c2, float c3){

    float radious = rad;
    const int steps = 360;

    glColor3f(0.0+c1, 0.0+c2, 0.0+c3);
    glBegin(GL_POLYGON);
    for(int i = 0; i<steps;i++){
       float theta = i*3.1416/180;
        //glVertex2f(0.5+radious*cos(theta),0.5+radious*sin(theta));//one way
        glVertex2f(x+radious*sin(theta),0.394-radious*cos(theta)); //second way
    }
glEnd();

}

void person(void){

    person_hands1();
    person_body();
    person_head();
    person_hands2();
    person_hands3();
    person_hands_4();
    person_leg_left();
    person_leg_right();
    umbrella_stand();
    umbrella_stand_below();
    umbrella_top();

    umbrella_ball(0.69,0.01,frameNumber1,frameNumber2,frameNumber3);
    umbrella_ball(0.73,0.01,frameNumber2,frameNumber3,frameNumber1);
    umbrella_ball(0.77,0.01,frameNumber3,frameNumber1,frameNumber2);
    umbrella_ball(0.81,0.01,frameNumber2,frameNumber3,frameNumber1);
    umbrella_ball(0.85,0.01,frameNumber1,frameNumber2,frameNumber3);
    umbrella_ball(0.89,0.01,frameNumber2,frameNumber3,frameNumber1);
    umbrella_ball(0.93,0.01,frameNumber3,frameNumber2,frameNumber1);
    umbrella_ball(0.97,0.01,frameNumber1,frameNumber3,frameNumber2);
    umbrella_ball(1.01,0.01,frameNumber3,frameNumber2,frameNumber1);
    //umbrella_ball(0.69,0.01);



    glPushMatrix();
    glRotatef(180, 1, 1, 0);

    umbrella(0.17,0.8);
    umbrella(0.14,0.9);
    umbrella(0.10,1.0);
    umbrella(0.08,1.11);
    umbrella(0.05,1.12);
    glPopMatrix();

}
void fox(void){
    fox_ear_left(0);
    fox_ear_right(0);
    fox_head(0);
    fox_body(0);
    fox_body_bottom(0);
    fox_tail(0);
    fox_tail_ex(0);

    fox_ear_left(0.2);
    fox_ear_right(0.2);
    fox_head(0.2);
    fox_body(0.2);
    fox_body_bottom(0.2);
    fox_tail(0.2);
    fox_tail_ex(0.2);
}

void display(void){
    float a=-0.1, b=-0.15,c=-0.1;

    blueSky();

for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated((i + 13*(frameNumber % 3000)/3000.0),0.05,0);
        Cloud(0,0.09,0.03);
        glPopMatrix();
    }

for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated((i + 13*(frameNumber % 3000)/3000.0),0.0,0);
        Cloud(-0.55,0.0,0.028);
        glPopMatrix();
    }

for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated((i + 13*(frameNumber % 3000)/3000.0),0.05,0);
    Cloud(0.5,0.06,0.028);
        glPopMatrix();
    }

for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated((i + 13*(frameNumber % 3000)/3000.0),0.02,0);
    Cloud(1.2,0.06,0.028);
        glPopMatrix();
    }
for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated((i + 13*(frameNumber % 3000)/3000.0),0.02,0);
    Cloud(0.7,0.06,0.028);
        glPopMatrix();
    }



    ground();
        glPushMatrix();
        glTranslated(.45,0.16,0);
        glScaled(0.5,0.5,1);
        fox();
        glPopMatrix();


    for(int i=0;i<3;i++){
    tree(a,0.2,0.4);
    a+=0.1;
    }

    for(int i=0;i<4;i++){
    tree(b,0.1,0.2);
    b+=0.1;
    }

    for(int i=0;i<4;i++){
    tree(c,0,0);
    c+=0.1;
    }

    float w=1.3, x=1.35,y=1.3;
    for(int i=0;i<3;i++){
    tree(w,0.2,0.4);
    w-=0.1;
    }

    for(int i=0;i<4;i++){
    tree(x,0.1,0.2);
    x-=0.1;
    }

    for(int i=0;i<4;i++){
    tree(y,0,0);
    y-=0.1;
    }

      glBegin(GL_QUADS); // Earth
      glColor3f(0.0+frameNumber1, 0.0+frameNumber2, 0.0+frameNumber3);
      glVertex3f(0.0f, 0.10f, 0.0f);
      glVertex3f(1.5f, 0.10f, 0.0f);
      glVertex3f(1.5f, 0.0f, 0.0f);
      glVertex3f(0.0f, 0.0f, 0.0f);
      glEnd();

for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated(-(i + 13*(frameNumber % 3000)/3000.0),0.05,0);
        glScaled(0.5,0.5,1);
        person();
        glPopMatrix();
    }


for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated(-(i + 13*(frameNumber % 1000)/1000.0),0,0);
        allrain();
        glPopMatrix();

    }






    glFlush ();

}
void init (void){
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, 1.5, 0.0, 1.0, -10.0, 10.0);
}
int main(int argc, char** argv){
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (1200, 600);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Rain Scenario");
    init ();
    glutDisplayFunc(display);
    glutTimerFunc(200,doFrame,1);
    glutTimerFunc(20,doFrame1,1);
    glutTimerFunc(20,doFrame2,1);
    glutTimerFunc(20,doFrame3,1);
    glutMainLoop();
    return 0;
}