#include <windows.h>
#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>
////////////////////////Font page code/////////////////////////////////////////////
void mydisplay();
void display();
void display2();
void display3();
void frontsreen();
void drawstring();
void setFont();
GLint flag=0;
void *currentfont;
void setFont(void *font)
{
	currentfont=font;
}
void drawstring(float x,float y,float z,char *string)
{
	char *c;
	glRasterPos3f(x,y,z);

	for(c=string;*c!='\0';c++)
	{
		glutBitmapCharacter(currentfont,*c);
	}
}
void frontscreen(void)
{
    setFont(GLUT_BITMAP_TIMES_ROMAN_24);
    glClearColor(0.6,0.6,0,0);/*background for cover page*/
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1,1,1);
    drawstring(0.60,1.2,0.0,"DAFFODIL INTERNATIONAL UNIVERSITY");
    glColor3f(1,1,1);
    drawstring(0.40,0.9,0.0,"DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING");
    glColor3f(1,1,1);
    drawstring(0.75,0.7,0.0,"COMPUTER GRAPHICS LAB");
    glColor3f(1,1,.3);
    drawstring(0.6,0.6,0.0,"PROJECT NAME - Landscape Architecture");
    glColor3f(1,1,1);
    drawstring(0.5,0.5,0.0,"STUDENT NAME");
    glColor3f(1,1,1);
    drawstring(0.5,0.4,0.0,"Akash Ahmed");
    glColor3f(1,1,1);
    drawstring(1.1,0.5,0.0,"STUDENT ID");
    glColor3f(1,1,1);
    drawstring(1.1,0.4,0.0,"181-15-1714");
    glColor3f(1,0,0);
    drawstring(0.7,0.3,0.0,"PRESS ENTER TO START");

    glFlush();
}
void myKeyboard(unsigned char key, int x, int y )
{
switch(key)
    {
        case 13:
            if(flag==0)
            {
                flag=1;
                mydisplay();
            }
            break;
        case 'w':
            if(flag==1)
            {
                flag=2;
                mydisplay();
            }
            break;

        case 'e':
            if(flag==2)
            {
                flag=3;
                mydisplay();
            }
            break;
        case 'r':
            if(flag==3)
            {
                flag=2;
                mydisplay();
            }

            case 't':
            if(flag==2)
            {
                flag=1;
                mydisplay();
            }
            break;
        default:
            break;
    }
}


void mydisplay(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    if(flag==0)
        frontscreen();
    if(flag==1)
        display();
    if(flag==2)
        display2();
    if(flag==3)
        display3();
        glutSwapBuffers();
}
/////////////////////////////End of Font Page///////////////////////////////////////////
const int steps = 360;
const float angle = 3.1416*2/steps;
const double PI = 3.141592654;
int frameNumber = 0;
float frameNumber2 = 0;
float frameNumber3 = 0.3;
float frameNumber4 = 0;
void doFrame(int v) {
    frameNumber++;
    glutPostRedisplay();
    glutTimerFunc(30,doFrame,0);
}
void doFrame2(int v) {
    frameNumber2+=0.001;
    if(frameNumber2>1.0){
      frameNumber2=0.0;
    }
    glutPostRedisplay();
    glutTimerFunc(10,doFrame2,0);
}
void doFrame3(int v) {
    frameNumber3+=0.002;
        if(frameNumber3>1.0){
      frameNumber3=0.0;
    }
    glutPostRedisplay();
    glutTimerFunc(10,doFrame3,0);
}
void doFrame4(int v) {
    frameNumber4+=0.003;
        if(frameNumber4>1.0){
      frameNumber4=0.0;
    }
    glutPostRedisplay();
    glutTimerFunc(10,doFrame4,0);
}
void drawWindmill(){
	int i;
	glColor3f(0.8f, 0.8f, 0.9f);
	glBegin(GL_QUADS);
	glVertex2f(-0.05f, 0);
	glVertex2f(0.05f, 0);
	glVertex2f(0.05f, 3);
	glVertex2f(-0.05f, 3);
	glEnd();

	glTranslatef(0, 3, 0);
	glRotated(frameNumber * 3.5, 0, 0, 1);
	glColor3f(0.4f, 0.2f, 0.8f);
	for (i = 0; i < 3; i++) {
		glRotated(120, 0, 0, 1);
		glBegin(GL_POLYGON);
		glVertex2f(0,0);
		glVertex2f(0.5f, 0.1f);
		glVertex2f(1.5f,0);
		glVertex2f(0.5f, -0.1f);
		glEnd();
	}
}
void drawSun() {
	int i;
	glColor3f(0.7,0.7,0);
	for (i = 0; i < 13; i++){
		glRotatef( 360 / 13, 0, 0, 1 );
		glBegin(GL_LINES);
		glVertex2f(0, 0);
		glVertex2f(0.75f, 0);
		glEnd();
	}
	glColor3f(0,0,0);
}
void Sky()
{
       glBegin(GL_QUADS); // Sky
      glColor3f(1.0, 0.5, 0.0);
      glVertex3f(0.0f, 0.4f, 0.0f);
      glColor3f(0.0, 0.0, 0.5);
      glVertex3f(0.0f, 1.6f, 0.0f);
      glColor3f(0.0, 0.0, 0.5);
      glVertex3f(2.0f, 1.6f, 0.6f);
      glColor3f(1.0, 0.5, 0.0);
      glVertex3f(2.0f, 0.4f, 0.0f);
      glEnd();//End quad coordinates
}
void earth(void)
{
    glBegin(GL_POLYGON);
    glColor3f(0.222,0.20,0.254);
    glVertex2d(0.0,0.0);
    glVertex2d(0.0,0.7);
    glVertex2d(0.30,0.64);
    glVertex2d(0.44,0.5);
    glVertex2d(0.48,0.5);
    glVertex2d(0.70,0.4);
    glVertex2d(0.8,0.4);
    glVertex2d(1.20,0.4);
    glVertex2d(1.30,0.4);
    glVertex2d(1.30,0);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex2d(1.30,0);
    glVertex2d(1.30,0.4);
    glVertex2d(1.46,0.5);
    glVertex2d(1.52,0.5);
    glVertex2d(1.64,0.64);
    glVertex2d(1.68,0.66);
    glVertex2d(2.0,0.7);
    glVertex2d(2.0,0);
    glEnd();
glFlush ();
}
void Far(float x, float y, float color1,float color2,float color3){

glBegin(GL_POLYGON);
    glColor3f(.200+color1,0.555+color2,.200+color3);
    glVertex2d(0.3,0.0);
    glVertex2d(0.3+x,0.98+y);
    glVertex2d(0.35+x,0.95+y);
    glVertex2d(0.4+x,0.93+y);
    glVertex2d(0.45+x,0.90+y);
    glVertex2d(0.50+x,0.85+y);
    glVertex2d(0.55+x,0.83+y);
    glVertex2d(0.60+x,0.78+y);
    glVertex2d(0.65+x,0.75+y);
    glVertex2d(0.70+x,0.74+y);
    glVertex2d(0.75+x,0.74+y);
    glVertex2d(0.80+x,0.73+y);
    glVertex2d(0.85+x,0.73+y);
    glVertex2d(0.90+x,0.72+y);
    glVertex2d(0.95+x,0.72+y);
    glVertex2d(1.0+x,0.72+y);
    glVertex2d(1.0+x,0+y);
glEnd();

glBegin(GL_POLYGON);
    glVertex2d(1.0+x,0.0+y);
    glVertex2d(1.0+x,0.72+y);
    glVertex2d(1.05+x,0.72+y);
    glVertex2d(1.1+x,0.72+y);
    glVertex2d(1.15+x,0.74+y);
    glVertex2d(1.20+x,0.74+y);
    glVertex2d(1.25+x,0.76+y);
    glVertex2d(1.30+x,0.81+y);
    glVertex2d(1.35+x,.85+y);
    glVertex2d(1.40+x,0.88+y);
    glVertex2d(1.45+x,0.89+y);
    glVertex2d(1.50+x,0.90+y);
    glVertex2d(1.60+x,0.92+y);
    glVertex2d(1.70+x,0.95+y);
    glVertex2d(1.75+x,1.0+y);
    glVertex2d(1.80+x,1.1+y);
    glVertex2d(1.85+x,1.3+y);
    glVertex2d(1.95+x,1.1+y);
    glVertex2d(2.0+x,1.0+y);
    glVertex2d(2.0+x,0+y);
glEnd();
}
void ice()
{
    glColor3f(0.8,0.9,0.9);
    glBegin(GL_TRIANGLES);
    glVertex2d(1.555,1.15);
    glVertex2d(1.66,1.35);
    glVertex2d(1.74,1.15);
glEnd();
}
void circle(float rad, float color)
{
    float radious = rad;
    glColor3f (color,color,0);
    glBegin(GL_POLYGON);        //Circle making using Polygon
    for(int i = 0; i<steps;i++){
       float theta = i*3.1416/180;
        glVertex2f(1+radious*sin(theta),0.70-radious*cos(theta));
    }
glEnd();

}

void moon(float x, float y, float rad)
{
    float radious = rad;
    glColor3f (.9,.9,.9);

    glBegin(GL_POLYGON);        //Circle making using Polygon
    for(int i = 0; i<steps;i++){
       float theta = i*3.1416/180;
        glVertex2f(x+radious*sin(theta),y-radious*cos(theta));
    }
glEnd();
}



void circleCloud(float x, float y, float rad)
{
    float radious = rad;
    glColor3f (.8,.8,.8);

    glBegin(GL_POLYGON);        //Circle making using Polygon
    for(int i = 0; i<steps;i++){
       float theta = i*3.1416/180;
        glVertex2f(x+radious*sin(theta),y-radious*cos(theta));
    }
glEnd();
}
void Cloud(float x, float y,float rad){

    circleCloud(0.55+x,1.4+y,0.04+rad);
    circleCloud(0.5+x,1.415+y,0.052+rad);
    circleCloud(0.45+x,1.4+y,0.04+rad);
}
void smallTree(float y, float color)
{
    float a = 0.0;
     glBegin(GL_TRIANGLES); //Begin quad coordinates
      //Triangle
      glColor3f(0.0, 0.0+color, 0.0); //Small Tree color
for(int i =0; i<=16; i++){
      glVertex3f(0.00f+a, 0.60f+y, 0.0f);
      glVertex3f(0.02f+a, 0.655f+y, 0.0f);
      glVertex3f(0.04f+a, 0.60f+y, 0.0f);

      glVertex3f(0.04f+a, 0.60f+y, 0.0f);
      glVertex3f(0.05f+a, 0.653f+y, 0.0f);
      glVertex3f(0.06f+a, 0.60f+y, 0.0f);

      glVertex3f(0.06f+a, 0.60f+y, 0.0f);
      glVertex3f(0.08f+a, 0.668f+y, 0.0f);
      glVertex3f(0.10f+a, 0.60f+y, 0.0f);

      glVertex3f(0.10f+a, 0.60f+y, 0.0f);
      glVertex3f(0.11f+a, 0.642f+y, 0.0f);
      glVertex3f(0.12f+a, 0.60f+y, 0.0f);
      a+=0.12;
}
      glEnd();//End quad coordinates
}
void tree(float positionx,float positiony,float color)
{
float b=0,c=0,d=0;
for(int i =0; i<=6;i++){
     glBegin(GL_TRIANGLES); //Begin quad coordinates
      //Triangle
      glColor3f(0.0, 0.3+color, 0.0);
      glVertex3f(0.1f+positionx, 0.53f+b+positiony, 0.0f);
      glVertex3f(0.11f+c+positionx, 0.50f+d+positiony, 0.0f);
      glVertex3f(0.09f+b+positionx, 0.50f+d+positiony, 0.0f);
      glEnd();//End quad coordinates
    b-=0.02;
    c+=0.02;
    d-=0.04;
}
      glBegin(GL_QUADS); // Root
      //Square
      glColor3f(0.6, 0.3, 0.3);
      glVertex3f(0.09f+positionx, 0.26f+positiony, 0.0f);
      glVertex3f(0.11f+positionx, 0.26f+positiony, 0.0f);
      glVertex3f(0.11f+positionx, 0.16f+positiony, 0.0f);
      glVertex3f(0.09f+positionx, 0.16f+positiony, 0.0f);
      glEnd();//End quad coordinates
}
/////////////Making the road  ////////////////////
void road(float xposition )
{
        glBegin(GL_QUADS); // road
      //Square
      glColor3f(0.6, 0.3, 0.3);
      glVertex3f(0.06f+xposition, 0.24f, 0.0f);
      glVertex3f(0.13f+xposition, 0.24f, 0.0f);
      glVertex3f(0.13f+xposition, 0.22f, 0.0f);
      glVertex3f(0.06f+xposition, 0.22f, 0.0f);
      glEnd();//End quad coordinates
}
/////////////Animated car ////////////////////
void drawDisk(double radius) {
	int d;
	glBegin(GL_POLYGON);
	for (d = 0; d < 32; d++) {
		double angle = 2*PI/32 * d;
		glVertex2d( radius*cos(angle), radius*sin(angle));
	}
	glEnd();
}

void drawWheel() {
    int i;
	glColor3f(0,0,0);
	drawDisk(1);
	glColor3f(0.75f, 0.75f, 0.75f);
	drawDisk(0.8);
	glColor3f(0,0,0);
	drawDisk(0.2);
	glRotatef(frameNumber*20,0,0,1);
	glBegin(GL_LINES);
	for (i = 0; i < 15; i++) {
		glVertex2f(0,0);
		glVertex2d(cos(i*2*PI/15), sin(i*2*PI/15));
	}
	glEnd();
}
void drawCart( float x, float color1,float color2,float color3) {
    //Wheels
	glPushMatrix();
	glTranslatef(-1.5f+x, -0.1f, 0);
	glScalef(0.81f,0.81f,1);
	drawWheel();
	glPopMatrix();

	glPushMatrix();
	glTranslatef(1.5f+x, -0.1f, 0);
	glScalef(0.81f,0.81f,1);
	drawWheel();
	glPopMatrix();
	//Body of the cart
	glColor3f(0+color1,0+color2,0+color3);
	glBegin(GL_POLYGON);
	glVertex2f(-2.88f+x,1);
	glVertex2f(-2.5f+x,0);
	glVertex2f(2.5f+x,0);
	glVertex2f(2.88f+x,1);
	glVertex2f(2.88f+x,1);
	glVertex2f(2.5f+x,2);
	glVertex2f(-2.5f+x,2);
	glEnd();
}
////////////////////////////////////////////////////
void rain(float x){
    float b=0,c=0;
    for(int i=0; i<=1000; i++){

        glBegin(GL_LINES);
        glColor3f(0.8f, 1.0f, 1.0f);
        glVertex3f(0.05f+c+x, 0.98f+b+x, 0.0f);
        glVertex3f(0.04f+c+x, 0.96f+b+x, 0.0f);

        glEnd();
         b-=0.05;
         c-=0.02;
    }

}

void allrain(void){
float rr = 0.0;
    for(int i =0;i<23;i++){

      rain(rr);
    rr+=0.25;
    }
}
/////////////////////////////////////////////////////////////////////////////////

void display(void)
{
    Sky();
    for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated(+ 13*(frameNumber % 3000) / 3000.0, 0, 0);
        Cloud(0+i,0,0);
        glPopMatrix();

        glPushMatrix();
        glTranslated(13*(frameNumber % 3000) / 3000.0, 0, 0);
        Cloud(-0.4+i,-0.2,0);
        glPopMatrix();

        glPushMatrix();
        glTranslated(13*(frameNumber % 3000) / 3000.0, 0, 0);
        Cloud(0,0+i,-0.01);
        glPopMatrix();

        glPushMatrix();
        glTranslated( 13*(frameNumber % 3000) / 3000.0, 0, 0);
        Cloud(-0.4+i,-0.2,0);
        glPopMatrix();
    }


    glPushMatrix();
	glTranslated(1,.7,0);
	glRotated(-frameNumber*0.7,0,0,1);
	glScaled(0.43,0.43,1);
	drawSun();
	glPopMatrix();



    circle(0.23,0.7);
    circle(0.19,0.8);
    circle(0.15,0.9);
    circle(0.1,1.0);

    glPushMatrix();
    glTranslated(0.01,0.01,0);
    Far(-0.2,0,0,0,0);
    glPopMatrix();
    ice();

    smallTree(0.02,0.45);
    Far(0.0,-0.10,0.18,0.1,0.2);

    glPushMatrix();
    glScaled(1.3,1,0);
	glTranslated(-0.235,-0.15,0);

    ice();
	glPopMatrix();

    smallTree(-0.06,0.59);
    Far(0.12,-0.18,.20,0.2,0.2);

	glPushMatrix();
	glTranslated(0.8,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

	glPushMatrix();
	glTranslated(1,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

	glPushMatrix();
	glTranslated(1.2,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

    Far(0.08,-0.25,.20,.1,.2);
    earth();
    float b = 0.0;
    for(int i =0; i<16;i++)
    {
        road(b);
        b+=0.12;
    }
    tree(-0.07,0.65,0.07);
    tree(0.0,0.60,0.07);
    tree(0.1,0.55,0.07);
    tree(0.18,0.50,0.07);
    tree(0.26,0.45,0.07);
    tree(0.32,0.40,0.07);

    tree(-0.07,0.45,0.15);
    tree(0.0,0.50,0.15);
    tree(0.1,0.45,0.15);
    tree(0.18,0.40,0.15);
    tree(0.26,0.35,0.15);
    tree(0.32,0.30,0.15);

    tree(-0.03,0.40,0.2);
    tree(0.05,0.35,0.2);
    tree(0.12,0.30,0.2);
    tree(0.22,0.25,0.2);
///////////////////////////////////////////////////
    tree(1.87,0.65,0.07);
    tree(1.80,0.60,0.07);
    tree(1.73,0.55,0.07);
    tree(1.66,0.50,0.07);
    tree(1.59,0.45,0.07);
    tree(1.52,0.40,0.07);

    tree(1.87,0.45,0.15);
    tree(1.80,0.50,0.15);
    tree(1.73,0.45,0.15);
    tree(1.66,0.40,0.15);
    tree(1.59,0.35,0.15);
    tree(1.52,0.30,0.15);

    tree(1.87,0.45,0.2);
    tree(1.80,0.40,0.2);
    tree(1.71,0.33,0.2);
    tree(1.62,0.28,0.2);




for (int i =-20; i<40; i++){
    glPushMatrix();
	glTranslated(-(-i+ 13*(frameNumber % 1000) / 1000.0), 0.31, 0);
	glScaled(0.04,0.04,1);
	drawCart(i,frameNumber4,frameNumber2,frameNumber3);
	glPopMatrix();
}
for (int i =-20; i<40; i++){
    glPushMatrix();
	glTranslated(-i + 13*(frameNumber % 1000) / 1000.0, 0.21, 0);
	glScaled(0.04,0.04,1);
	drawCart(i,frameNumber2,frameNumber3,frameNumber4);
	glPopMatrix();
}
glFlush();
//glutSwapBuffers();
}


////////////////////////////////////////////////////////////////////////////////
void display2(void)
{
          glBegin(GL_QUADS); // Sky
      glColor3f(0.0, 0.0, 0.0);
      glVertex3f(0.0f, 0.4f, 0.0f);
      glColor3f(0.0, 0.0, 0.0);
      glVertex3f(0.0f, 1.6f, 0.0f);
      glColor3f(0.0, 0.0, 0.0);
      glVertex3f(2.0f, 1.6f, 0.6f);
      glColor3f(0.0, 0.0, 0.0);
      glVertex3f(2.0f, 0.4f, 0.0f);
      glEnd();//End quad coordinates



float starh1=0.0;
for(int j=0;j<4;j++){
        float starnumber1=0.0;
    for(int i = 0;i<60;i++){
    glColor3f(1,1,1);
    drawstring(starnumber1,1.5+starh1,0.0,"*");
    starnumber1+=0.2;
}
starh1-=0.1;
}




float starh2=0.0;
for(int j=0;j<4;j++){
        float starnumber2=0.1;
    for(int i = 0;i<60;i++){
    glColor3f(1,1,1);
    drawstring(starnumber2,1.45+starh2,0.0,"*");
    starnumber2+=0.2;
}
starh2-=0.1;
}




    moon(1,0.8,0.2);

    glPushMatrix();
    glTranslated(0.01,0.01,0);
    Far(-0.2,0,0,0,0);
    glPopMatrix();
    ice();

    smallTree(0.02,0.45);
    Far(0.0,-0.10,0.18,0.1,0.2);

    glPushMatrix();
    glScaled(1.3,1,0);
	glTranslated(-0.235,-0.15,0);

    ice();
	glPopMatrix();

    smallTree(-0.06,0.59);
    Far(0.12,-0.18,.20,0.2,0.2);

	glPushMatrix();
	glTranslated(0.8,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

	glPushMatrix();
	glTranslated(1,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

	glPushMatrix();
	glTranslated(1.2,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

    Far(0.08,-0.25,.20,.1,.2);
    earth();
    float b = 0.0;
    for(int i =0; i<16;i++)
    {
        road(b);
        b+=0.12;
    }
    tree(-0.07,0.65,0.07);
    tree(0.0,0.60,0.07);
    tree(0.1,0.55,0.07);
    tree(0.18,0.50,0.07);
    tree(0.26,0.45,0.07);
    tree(0.32,0.40,0.07);

    tree(-0.07,0.45,0.15);
    tree(0.0,0.50,0.15);
    tree(0.1,0.45,0.15);
    tree(0.18,0.40,0.15);
    tree(0.26,0.35,0.15);
    tree(0.32,0.30,0.15);

    tree(-0.03,0.40,0.2);
    tree(0.05,0.35,0.2);
    tree(0.12,0.30,0.2);
    tree(0.22,0.25,0.2);
///////////////////////////////////////////////////
    tree(1.87,0.65,0.07);
    tree(1.80,0.60,0.07);
    tree(1.73,0.55,0.07);
    tree(1.66,0.50,0.07);
    tree(1.59,0.45,0.07);
    tree(1.52,0.40,0.07);

    tree(1.87,0.45,0.15);
    tree(1.80,0.50,0.15);
    tree(1.73,0.45,0.15);
    tree(1.66,0.40,0.15);
    tree(1.59,0.35,0.15);
    tree(1.52,0.30,0.15);

    tree(1.87,0.45,0.2);
    tree(1.80,0.40,0.2);
    tree(1.71,0.33,0.2);
    tree(1.62,0.28,0.2);


for (int i =-20; i<40; i++){
    glPushMatrix();
	glTranslated(-(-i+ 13*(frameNumber % 1000) / 1000.0), 0.31, 0);
	glScaled(0.04,0.04,1);
	drawCart(i,frameNumber4,frameNumber2,frameNumber3);
	glPopMatrix();
}
for (int i =-20; i<40; i++){
    glPushMatrix();
	glTranslated(-i + 13*(frameNumber % 1000) / 1000.0, 0.21, 0);
	glScaled(0.04,0.04,1);
	drawCart(i,frameNumber2,frameNumber3,frameNumber4);
	glPopMatrix();
}
glFlush();
//glutSwapBuffers();
}

//////////////////////////////////////////////////////

void display3(void)
{
          glBegin(GL_QUADS); // Sky
      glColor3f(0.0, 0.0, 0.0);
      glVertex3f(0.0f, 0.4f, 0.0f);
      glColor3f(0.0, 0.0, 0.0);
      glVertex3f(0.0f, 1.6f, 0.0f);
      glColor3f(0.0, 0.0, 0.0);
      glVertex3f(2.0f, 1.6f, 0.6f);
      glColor3f(0.0, 0.0, 0.0);
      glVertex3f(2.0f, 0.4f, 0.0f);
      glEnd();//End quad coordinates


for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated(+ 13*(frameNumber % 3000) / 3000.0, 0, 0);
        Cloud(0+i,0,0);
        glPopMatrix();

        glPushMatrix();
        glTranslated(13*(frameNumber % 3000) / 3000.0, 0, 0);
        Cloud(-0.4+i,-0.2,0);
        glPopMatrix();

        glPushMatrix();
        glTranslated(13*(frameNumber % 3000) / 3000.0, 0, 0);
        Cloud(0,0+i,-0.01);
        glPopMatrix();

        glPushMatrix();
        glTranslated( 13*(frameNumber % 3000) / 3000.0, 0, 0);
        Cloud(-0.4+i,-0.2,0);
        glPopMatrix();
    }






    moon(1,0.8,0.2);

    glPushMatrix();
    glTranslated(0.01,0.01,0);
    Far(-0.2,0,0,0,0);
    glPopMatrix();
    ice();

    smallTree(0.02,0.45);
    Far(0.0,-0.10,0.18,0.1,0.2);

    glPushMatrix();
    glScaled(1.3,1,0);
	glTranslated(-0.235,-0.15,0);

    ice();
	glPopMatrix();

    smallTree(-0.06,0.59);
    Far(0.12,-0.18,.20,0.2,0.2);

	glPushMatrix();
	glTranslated(0.8,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

	glPushMatrix();
	glTranslated(1,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

	glPushMatrix();
	glTranslated(1.2,0.44,0);
	glScaled(0.05,0.06,1);
	drawWindmill();
	glPopMatrix();

    Far(0.08,-0.25,.20,.1,.2);
    earth();
    float b = 0.0;
    for(int i =0; i<16;i++)
    {
        road(b);
        b+=0.12;
    }
    tree(-0.07,0.65,0.07);
    tree(0.0,0.60,0.07);
    tree(0.1,0.55,0.07);
    tree(0.18,0.50,0.07);
    tree(0.26,0.45,0.07);
    tree(0.32,0.40,0.07);

    tree(-0.07,0.45,0.15);
    tree(0.0,0.50,0.15);
    tree(0.1,0.45,0.15);
    tree(0.18,0.40,0.15);
    tree(0.26,0.35,0.15);
    tree(0.32,0.30,0.15);

    tree(-0.03,0.40,0.2);
    tree(0.05,0.35,0.2);
    tree(0.12,0.30,0.2);
    tree(0.22,0.25,0.2);
///////////////////////////////////////////////////
    tree(1.87,0.65,0.07);
    tree(1.80,0.60,0.07);
    tree(1.73,0.55,0.07);
    tree(1.66,0.50,0.07);
    tree(1.59,0.45,0.07);
    tree(1.52,0.40,0.07);

    tree(1.87,0.45,0.15);
    tree(1.80,0.50,0.15);
    tree(1.73,0.45,0.15);
    tree(1.66,0.40,0.15);
    tree(1.59,0.35,0.15);
    tree(1.52,0.30,0.15);

    tree(1.87,0.45,0.2);
    tree(1.80,0.40,0.2);
    tree(1.71,0.33,0.2);
    tree(1.62,0.28,0.2);


for (int i =-20; i<40; i++){
    glPushMatrix();
	glTranslated(-(-i+ 13*(frameNumber % 1000) / 1000.0), 0.31, 0);
	glScaled(0.04,0.04,1);
	drawCart(i,frameNumber4,frameNumber2,frameNumber3);
	glPopMatrix();
}
for (int i =-20; i<40; i++){
    glPushMatrix();
	glTranslated(-i + 13*(frameNumber % 1000) / 1000.0, 0.21, 0);
	glScaled(0.04,0.04,1);
	drawCart(i,frameNumber2,frameNumber3,frameNumber4);
	glPopMatrix();
}

for(int i =-20; i<20;i++){
        glPushMatrix();
        glTranslated(-(i + 13*(frameNumber % 1000)/1000.0),0,0);
        allrain();
        glPopMatrix();

    }

glFlush();
//glutSwapBuffers();
}

//////////////////////////////////////////////////////

void init (void)
{
    glClearColor (0.0, 0.0, 0.0, 0.0); //select clearing (background) color
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, 2.0, 0.0, 1.6, -10.0, 10.0);
}
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    //glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitDisplayMode(GLUT_DOUBLE);
    glutInitWindowSize (1200, 800);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Landscape Architecture");
    init();
    glutDisplayFunc(display);
    glutTimerFunc(200,doFrame,1);
    glutTimerFunc(90,doFrame2,1);
    glutTimerFunc(150,doFrame3,1);
    glutTimerFunc(120,doFrame4,1);
    glutDisplayFunc(mydisplay);
    glutKeyboardFunc(myKeyboard);
    glutMainLoop();
    return 0;
}
